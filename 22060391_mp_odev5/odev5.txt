import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  // Tema durumunu tutmak için bir değişken
  bool isDarkTheme = false;

  // Açık tema ve karanlık tema yapılandırmaları
  ThemeData lightTheme = ThemeData(
    primarySwatch: Colors.lightBlue,
    brightness: Brightness.light,
    scaffoldBackgroundColor: Colors.white,
    appBarTheme: AppBarTheme(
      backgroundColor: Colors.lightBlue,
    ),
    textTheme: TextTheme(
      bodyLarge: TextStyle(color: Colors.black),
    ),
    elevatedButtonTheme: ElevatedButtonThemeData(
      style: ElevatedButton.styleFrom(
        backgroundColor: Colors.blue, // Buton arka plan rengi
        foregroundColor: Colors.white, // Buton metin rengi
      ),
    ),
  );

  ThemeData darkTheme = ThemeData(
    primarySwatch: Colors.deepPurple,
    brightness: Brightness.dark,
    scaffoldBackgroundColor: Colors.black,
    appBarTheme: AppBarTheme(
      backgroundColor: Colors.deepPurple,
    ),
    textTheme: TextTheme(
      bodyLarge: TextStyle(color: Colors.white),
    ),
    elevatedButtonTheme: ElevatedButtonThemeData(
      style: ElevatedButton.styleFrom(
        backgroundColor: Colors.deepPurple,
        foregroundColor: Colors.white,
      ),
    ),
  );

  // Tema değiştirme fonksiyonu
  void _toggleTheme() {
    setState(() {
      isDarkTheme = !isDarkTheme;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Ürün Uygulaması',
      theme: isDarkTheme ? darkTheme : lightTheme,
      home: ProductPage(
        toggleTheme: _toggleTheme,
        isDarkTheme: isDarkTheme,
      ),
    );
  }
}

// ProductPage sınıfına toggleTheme ve isDarkTheme parametrelerini ekledik
class ProductPage extends StatefulWidget {
  final VoidCallback toggleTheme;
  final bool isDarkTheme;

  ProductPage({required this.toggleTheme, required this.isDarkTheme});

  @override
  _ProductPageState createState() => _ProductPageState();
}

class _ProductPageState extends State<ProductPage> {
  // Ürün bilgilerini içeren bir liste tanımlar.
  final List<Map<String, dynamic>> products = [
    {'name': 'Kazak', 'price': '750₺'},
    {'name': 'Pantolon', 'price': '1200₺'},
    {'name': 'Tişört', 'price': '550₺'},
    {'name': 'Ayakkabı', 'price': '3500₺'},
  ];

  // Seçili ürünün indeksini tutar. Başlangıçta -1, yani hiçbir ürün seçilmemiş.
  int selectedIndex = -1;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Ürün Listesi'),
        leading: IconButton(
          icon: Icon(widget.isDarkTheme ? Icons.light_mode : Icons.dark_mode),
          onPressed: widget.toggleTheme,
        ),
      ),
      body: Column(
        children: [
          // Yatay ListView widget'ı
          Container(
            height: 80,
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              itemCount: products.length,
              itemBuilder: (context, index) {
                return GestureDetector(
                  onTap: () {
                    setState(() {
                      selectedIndex = index;
                    });
                  },
                  child: Container(
                    width: 100,
                    margin: EdgeInsets.all(8.0),
                    color: selectedIndex == index
                        ? (widget.isDarkTheme ? Colors.deepPurple : Colors.blue)
                        : Colors.grey[300],
                    child: Center(
                      child: Text(
                        products[index]['name'],
                        style: TextStyle(color: Colors.white),
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
          Expanded(
            // GridView widget'ı
            child: GridView.builder(
              padding: const EdgeInsets.all(8.0),
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                crossAxisSpacing: 8.0,
                mainAxisSpacing: 8.0,
              ),
              itemCount: products.length,
              itemBuilder: (context, index) {
                return Container(
                  padding: EdgeInsets.all(16.0),
                  decoration: BoxDecoration(
                    color: selectedIndex == index
                        ? (widget.isDarkTheme ? Colors.deepPurple : Colors.blue)
                        : Colors.grey[200],
                    borderRadius: BorderRadius.circular(12.0),
                  ),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        products[index]['name'],
                        style: TextStyle(
                          fontSize: 18.0,
                          fontWeight: FontWeight.bold,
                          color:
                              widget.isDarkTheme ? Colors.white : Colors.black,
                        ),
                      ),
                      SizedBox(height: 8.0),
                      Text(
                        products[index]['price'],
                        style: TextStyle(
                          color:
                              widget.isDarkTheme ? Colors.white : Colors.black,
                        ),
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
